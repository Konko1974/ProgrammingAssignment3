a <- available.packages()
a
install.packages("slidify")
head(rownames(a),100)
install.packages("ggplot2","devtools")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial"))
install.packages("ggplot2")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
bioClite()
biocLite()
biocLite(c("GenomicFeatures","AnnotationDbi"))
detach("package:BiocInstaller", unload=TRUE)
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.2/library")
find_rtools()
library("devtools", lib.loc="C:/Program Files/R/R-3.1.2/library")
find_rtools()
find.package("devtools")
library(devtools)
find_rtools()
install.packages("manipulate")
install.packages("KernSmooth")
library(KernSmooth)
q()
install.packages(c("colorspace", "foreign", "lattice", "manipulate", "MASS", "mgcv", "nlme", "survival"))
1+1
x<-TRUE
x
x<-"TRUE"
x
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x)) { for (j in seq_len(ncol(x)) { print(x[i,j])}}
for (i in seq_len(nrow(x))) { for (j in seq_len(ncol(x))) { print(x[i,j])}}
x
q()
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5 + 0.3 * x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
summary(y)
x
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
r1<-c(1,0,1)
r2<-c(2,-1,3)
r3<-c(1,4,2)
mytest<-matrix(c(r1,r2,r3),nrow=3,ncol=3,byrow=TRUE)
mytest
inverse(mytest)
inv(mytest)
setwd("C:/Users/AICEnricoF/git/ProgrammingAssignment3")
source("best.R")
best("TX", "heart attack")[1]
best("NY", "hert attack")
best("BB", "heart attack")
best("MD", "pneumonia")[1]
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
return(hospitals[lastRow,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
source("rankinghospital.R")
setwd("C:/Users/AICEnricoF/git/ProgrammingAssignment3")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "best")
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
while(is.na(hospitals[lastRow,2])))
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
while(is.na(hospitals[lastRow,2]))
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
print(hospitals)
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
while(is.na(hospitals[lastRow,2]))
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
print(hospitals[lastRow,1])
if (num=="worst")
{
index<-lastRow
while(is.na(hospitals[lastRow,2]))
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
print(hospitals[lastRow,2])
if (num=="worst")
{
index<-lastRow
while(is.na(hospitals[lastRow,2]))
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
print(hospitals[lastRow,2])
if (num=="worst")
{
index<-lastRow
while(hospitals[lastRow,2] == "Not Available2")
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
print(hospitals[lastRow,2])
while(hospitals[lastRow,2] == "Not Available2")
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
print(hospitals[lastRow,2])
while(hospitals[lastRow,2] == "Not Available")
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
print(hospitals[lastRow,2])
while(hospitals[index,2] == "Not Available")
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("base.R")
rankhospital<-function(state, outcome,num="best")
{
hospitals<-base(state, outcome)
if (num=="best")
{
return(hospitals[1,1])
}
lastRow<-nrow(hospitals)
if (num=="worst")
{
index<-lastRow
while(hospitals[index,2] == "Not Available")
{
index<-index-1
}
return(hospitals[index,1])
}
index<-as.numeric(num)
if ((index>0)&&(index<=lastRow))
{
return(hospitals[index,1])
}
else
{
return(NA)
}
}
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
