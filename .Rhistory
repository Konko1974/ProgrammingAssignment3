library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.2/library")
find_rtools()
library("devtools", lib.loc="C:/Program Files/R/R-3.1.2/library")
find_rtools()
find.package("devtools")
library(devtools)
find_rtools()
install.packages("manipulate")
install.packages("KernSmooth")
library(KernSmooth)
q()
install.packages(c("colorspace", "foreign", "lattice", "manipulate", "MASS", "mgcv", "nlme", "survival"))
1+1
x<-TRUE
x
x<-"TRUE"
x
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x)) { for (j in seq_len(ncol(x)) { print(x[i,j])}}
for (i in seq_len(nrow(x))) { for (j in seq_len(ncol(x))) { print(x[i,j])}}
x
q()
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
B0<-0.5
B1<-2
y<-B0+B1*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5 + 0.3 * x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
sample(1:10,replace=TRUE)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
summary(y)
x
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
r1<-c(1,0,1)
r2<-c(2,-1,3)
r3<-c(1,4,2)
mytest<-matrix(c(r1,r2,r3),nrow=3,ncol=3,byrow=TRUE)
mytest
inverse(mytest)
inv(mytest)
factor(letters[1:20], labels = "letter")
class(ordered(4:1)) # "ordered", inheriting from "factor"
z <- factor(LETTERS[3:1], ordered = TRUE)
z
source("base.R")
source("base.R")
setwd("C:/Users/AICEnricoF/git/ProgrammingAssignment3")
source("base.R")
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateList<-subset(data,select=State)
unique(stateList)
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueStates<-unique(stateList)
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueStates<-unique(orderedStates)
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueStates<-unique(orderedStates)
print(uniqueStates)
}
rankall()
x<-matrix(nrow=54,ncol=2,dimnames = list(,c("hospital", "state")))
x
x<-matrix(nrow=54,ncol=2,dimnames = list(c(1:54),c("hospital", "state")))
x
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(nrowuniqueOrderedStates())
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(nrow(uniqueOrderedStates())
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(nrow(uniqueOrderedStates()))
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(nrow(uniqueOrderedStates)
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(nrow(uniqueOrderedStates))
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(uniqueOrderedStates)
print(nrow(uniqueOrderedStates))
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
print(uniqueOrderedStates)
print(length(uniqueOrderedStates))
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
x
}
rankall()
source("base.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-c()
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1,1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
head(rankall("heart attack", 20), 10)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-c()
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1,1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
head(rankall("heart attack", 20), 10)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-c()
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
head(rankall("heart attack", 20), 10)
debug(rankall)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-c()
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
debug(rankall)
rankall("heart attack", 20)
rankhospital("AK", "heart attack", 20)
rankhospital("AK", "heart attack", 20)
rankhospital("MN", "heart attack", 20)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(1)
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
rankall("heart attack", 20)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(mode="character",1)
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
rankall("heart attack", 20)
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(mode="character",1)
indice<-1
while(indice<=numberOfStates)
{
print(indice)
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
}
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(mode="character",1)
indice<-1
while(indice<=numberOfStates)
{
print(indice)
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
return(x)
}
x<-rankall("heart attack", 20)
x
head(x,10)
x<-tail(rankall("pneumonia", "worst"), 3)
x
x<-tail(rankall("heart failure"), 10)
x
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(mode="character",1)
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
return(x)
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("rankhospital.R")
rankall<-function(outcome,num="best")
{
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-subset(data,select=State)
statesName <- states[, 1]
orderedStates<-states[order(statesName),]
uniqueOrderedStates<-unique(orderedStates)
numberOfStates<-length(uniqueOrderedStates)
x<-matrix(nrow=numberOfStates,ncol=2,dimnames = list(uniqueOrderedStates,c("hospital", "state")))
ris<-vector(mode="character",1)
indice<-1
while(indice<=numberOfStates)
{
ris<-rankhospital(uniqueOrderedStates[indice], outcome, num)
x[indice,1] = ris[1]
x[indice,2] = uniqueOrderedStates[indice]
indice<-indice+1
}
rit<-data.frame(x)
return(rit)
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
